// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package buffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RequestPacketT struct {
	CorrelationId []byte `json:"correlation_id"`
	Opcode RequestOp `json:"opcode"`
	Length uint16 `json:"length"`
	Body []byte `json:"body"`
}

func (t *RequestPacketT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	correlationIdOffset := flatbuffers.UOffsetT(0)
	if t.CorrelationId != nil {
		correlationIdOffset = builder.CreateByteString(t.CorrelationId)
	}
	bodyOffset := flatbuffers.UOffsetT(0)
	if t.Body != nil {
		bodyOffset = builder.CreateByteString(t.Body)
	}
	RequestPacketStart(builder)
	RequestPacketAddCorrelationId(builder, correlationIdOffset)
	RequestPacketAddOpcode(builder, t.Opcode)
	RequestPacketAddLength(builder, t.Length)
	RequestPacketAddBody(builder, bodyOffset)
	return RequestPacketEnd(builder)
}

func (rcv *RequestPacket) UnPackTo(t *RequestPacketT) {
	t.CorrelationId = rcv.CorrelationIdBytes()
	t.Opcode = rcv.Opcode()
	t.Length = rcv.Length()
	t.Body = rcv.BodyBytes()
}

func (rcv *RequestPacket) UnPack() *RequestPacketT {
	if rcv == nil {
		return nil
	}
	t := &RequestPacketT{}
	rcv.UnPackTo(t)
	return t
}

type RequestPacket struct {
	_tab flatbuffers.Table
}

const RequestPacketIdentifier = "V001"

func GetRootAsRequestPacket(buf []byte, offset flatbuffers.UOffsetT) *RequestPacket {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RequestPacket{}
	x.Init(buf, n+offset)
	return x
}

func FinishRequestPacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RequestPacketIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RequestPacketBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RequestPacketIdentifier)
}

func GetSizePrefixedRootAsRequestPacket(buf []byte, offset flatbuffers.UOffsetT) *RequestPacket {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RequestPacket{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRequestPacketBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RequestPacketIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRequestPacketBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RequestPacketIdentifier)
}

func (rcv *RequestPacket) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RequestPacket) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RequestPacket) CorrelationId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RequestPacket) CorrelationIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RequestPacket) CorrelationIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RequestPacket) MutateCorrelationId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *RequestPacket) Opcode() RequestOp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return RequestOp(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RequestPacket) MutateOpcode(n RequestOp) bool {
	return rcv._tab.MutateUint16Slot(6, uint16(n))
}

func (rcv *RequestPacket) Length() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RequestPacket) MutateLength(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *RequestPacket) Body(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RequestPacket) BodyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RequestPacket) BodyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RequestPacket) MutateBody(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RequestPacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RequestPacketAddCorrelationId(builder *flatbuffers.Builder, correlationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(correlationId), 0)
}
func RequestPacketStartCorrelationIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RequestPacketAddOpcode(builder *flatbuffers.Builder, opcode RequestOp) {
	builder.PrependUint16Slot(1, uint16(opcode), 0)
}
func RequestPacketAddLength(builder *flatbuffers.Builder, length uint16) {
	builder.PrependUint16Slot(2, length, 0)
}
func RequestPacketAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(body), 0)
}
func RequestPacketStartBodyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RequestPacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
